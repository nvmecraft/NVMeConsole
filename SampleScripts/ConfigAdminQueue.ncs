// status - draft
//
// 

asqSzie = 256
acqSize = 256

//Disable the controller
CC = ReadCtrlReg32(0x14)
CC = BitAnd32(CC, 0xFFFFFFFE)
WriteCtrlReg32(0x14, CC)

// wait until CSTS.RDY = 0
etime = 0
stime = time
while(true)
    CSTS = ReadCtrlReg32(0x1C)
    
    if(BitAnd32(CSTS, 0x00000001) == 0) then
        etime = time - stime
        break
    end if

    etime = time - stime
    if(etime > TO * 0.5) then
        print "timeout"
        break
    end if
end while

//CC.IOSQES = 6
CC = ReadCtrlReg32(0x14)
CC = BitAnd32(CC, BitNot32(BitShiftLeft32(0x0F, 20)))
CC = BitOr32(CC, BitShiftLeft32(6, 20))
WriteCtrlReg32(0x14, CC)

//CC.IOCQES = 4
CC = ReadCtrlReg32(0x14)
CC = BitAnd32(CC, BitNot32(BitShiftLeft32(0x0F, 16)))
CC = BitOr32(CC, BitShiftLeft32(4, 16))
WriteCtrlReg32(0x14, CC)

// Set AQA.ACQS
AQA = ReadCtrlReg32(0x24)
AQA = BitAnd32(AQA, BitNot32(BitShiftLeft32(0xFFF, 16)))
AQA = BitOr32(AQA, BitShiftLeft32(acqSize-1, 16))
WriteCtrlReg32(0x24, AQA)

// Set AQA.ASQS
AQA = ReadCtrlReg32(0x24)
AQA = BitAnd32(AQA, BitNot32(BitShiftLeft32(0xFFF, 0)))
AQA = BitOr32(AQA, BitShiftLeft32(asqSize-1, 0))
WriteCtrlReg32(0x24, AQA)

// Set ASQ
asq = new PCMEM
asq.PCMem_Assign((2^6 * asqSize), true)
WriteCtrlReg64(0x28, ToHexString(asq.address))

// Set ACQ
acq = new PCMEM
acq.PCMem_Assign((2^4 * acqSize), true)
WriteCtrlReg64(0x30, ToHexString(acq.address))

//Enable the controller
CC = ReadCtrlReg32(0x14)
CC = BitOr32(CC, 0x00000001)
WriteCtrlReg32(0x14, CC)

// wait until CSTS.RDY = 1
etime = 0
stime = time
while(true)
    CSTS = ReadCtrlReg32(0x1C)
    
    if(BitAnd32(CSTS, 0x00000001) == 1) then
        etime = time - stime
        break
    end if

    etime = time - stime
    if(etime > TO * 0.5) then
        print "timeout"
        break
    end if
end while
